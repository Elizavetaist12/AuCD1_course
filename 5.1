'''
Лабораторная работа №5
Задана рекуррентная функция. Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно (значение, время).
Определить (смоделировать) границы применимости рекурсивного и итерационного подхода.
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме в виде отчета по лабораторной работе.
Вариант 20
F(n) = (-1)^n*(F(n–1) /(2n)! - (3*n - 2))

'''

import timeit
import matplotlib.pyplot as plt

# Функция для вычисления факториала числа
last_factorial = 1
def factorial(n):
    global last_factorial
    last_factorial = n * last_factorial
    return last_factorial

# Рекурсивная функция для вычисления факториала
def recursive_factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * recursive_factorial(n-1)

# Итеративная функция для вычисления факториала
def iterative_factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

k = -1
answer = 0
# Функция для рекурсивного вычисления значения F
def recursive_F(n):
    global k, answer, last_factorial
    if n == 0:
        return 0
    else:
        k *= -1
        answer = k * (recursive_F(n - 1)/recursive_factorial(2 * n) / (3 * n - 2))
    return answer

sign = - 1
F_curr = 0
F_result = 0
# Функция для итеративного вычисления значения F
def iterative_F(n):
    global sign, F_curr, F_result, last_factorial
    if n == 0:
        return 0
    for i in range(1, n + 1):
        sign *= -1
        F_result = sign * (F_curr / iterative_factorial(i) - (3 * i - 2))
        F_curr = F_result
    return F_result


n = int(input("Введите число n: "))
#print("Рекурсия: ", recursive_F(n))
#print("Итерация: ", iterative_F(n))

# Таблица
table = []

rec_time = []
iter_time = []
for j in range(1, n + 1):
    rec_time = timeit.timeit(lambda: recursive_F(j), number=1)
    iter_time = timeit.timeit(lambda: iterative_F(j), number=1)

    table.append((j, rec_time, iter_time))

print("+-" + "-" * 14 + "-+-" + "-" * 14 + "-+-" + "-" * 14 + "-+")
print("| {:^14} | {:^14} | {:^14} |".format("n", "Recursive", "Iterative"))
print("+-" + "-" * 14 + "-+-" + "-" * 14 + "-+-" + "-" * 14 + "-+")
for row in table:
    print("| {:^14} | {:^14.6f} | {:^14.6f} |".format(row[0], row[1], row[2]))
    print("+-" + "-" * 14 + "-+-" + "-" * 14 + "-+-" + "-" * 14 + "-+")

# График
plt.plot([row[0] for row in table], [row[1] for row in table], label='Рекурсия', marker='o')
plt.plot([row[0] for row in table], [row[2] for row in table], label='Итерация', marker='o')
plt.title('Сравнение времени Рекурсивного и Итерационного подхода')
plt.xlabel('n')
plt.ylabel('Время')
plt.legend()
plt.grid(True)
plt.show()



